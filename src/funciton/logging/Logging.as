package funciton.logging {		import funciton.logging.formatters.DefaultLogFormatter;	import funciton.models.LogMessage;	import funciton.logging.handlers.IDEHandler;		public class Logging {				public static const NONE:uint = 0;		public static const DEBUG:uint = 1;		public static const INFO:uint = 2;		public static const WARNING:uint = 4;		public static const ERROR:uint = 8;		public static const CRITICAL:uint = 16;		public static const ALL:uint = Logging.DEBUG | Logging.INFO | Logging.WARNING | Logging.ERROR | Logging.CRITICAL;				private var $__logFormatter:Function = DefaultLogFormatter;		private var $__logHandler:Function = IDEHandler;		private var $__environment:String = "default";		private var $__level:uint = Logging.ALL;				public function Logging(){		}				public function get environment():String{ return $__environment; }		public function set environment(label:String):void{ $__environment = label; }				public function get level():uint{ return $__level; }		public function set level(value:uint):void{ $__level = value; }				public static function getFlagLabel(flag:uint):String{			var type:String = "unknown";						switch(flag){				case Logging.DEBUG:					type = "debug";					break;				case Logging.INFO:					type = "info";					break;				case Logging.WARNING:					type = "warning";					break;				case Logging.ERROR:					type = "error";					break;				case Logging.CRITICAL:					type = "critical";					break;			}						return type;		}				public function setFormatter(logFormatter:Function):void{			$__logFormatter = logFormatter;		}				public function setHandler(logHandler:Function):void{			$__logHandler = logHandler;		}				public function debug(message:String):void{			addLogMessage(Logging.DEBUG, message);		}				public function info(message:String):void{			addLogMessage(Logging.INFO, message);		}				public function warning(message:String):void{			addLogMessage(Logging.WARNING, message);		}				public function error(message:String):void{			addLogMessage(Logging.ERROR, message);		}				public function critical(message:String):void{			addLogMessage(Logging.CRITICAL, message);		}				protected function addLogMessage(type:uint, message:String):void{			var logMessage:LogMessage = new LogMessage(type, message, $__environment);			if((logMessage.type & $__level) == logMessage.type) $__logHandler.apply(null, [$__logFormatter.apply(null, [logMessage])]);		}			}	}