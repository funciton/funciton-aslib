package funciton.collections {		import funciton.events.CollectionEvent;		import flash.events.EventDispatcher;		public class ArrayCollection extends EventDispatcher {				private var $__source:Array = new Array();				public function ArrayCollection(source:Array = null){			if(source != null) this.source = source;		}				public function get length():uint{ return $__source.length; }				public function get source():Array{ return $__source; }		public function set source(value:Array):void{			$__source = value;			dispatchEvent(new CollectionEvent(CollectionEvent.RESET));			dispatchEvent(new CollectionEvent(CollectionEvent.UPDATE));		}				public function addAllAt(source:Array, index:uint):void{			if(index > length) throw new RangeError("Index out of bounds");						$__source.splice.apply($__source, [index, 0].concat(source));			dispatchEvent(new CollectionEvent(CollectionEvent.ADD, false, false, source));			dispatchEvent(new CollectionEvent(CollectionEvent.UPDATE));		}				public function addAll(source:Array):void{			addAllAt(source, length);		}						public function addItem(item:Object):void{			addAllAt([item], length);		}				public function addItemAt(item:Object, index:uint):void{			addAllAt([item], index);		}				public function contains(item:Object):Boolean{			return ($__source.indexOf(item) != -1);		}				public function getItemAt(index:uint):Object{			if(index > (length - 1)) throw new RangeError("Index out of bounds");						return $__source[index];		}				public function getItemIndex(item:Object):uint{			return $__source.indexOf(item);		}				public function removeAll():void{			var oldSource:Array = toArray();			source = [];			dispatchEvent(new CollectionEvent(CollectionEvent.REMOVE, false, false, oldSource));		}				public function removeItemAt(index:uint):Object{			if(index > (length - 1)) throw new Error("Index out of bounds");			var item:Object = $__source.splice(index, 1);						dispatchEvent(new CollectionEvent(CollectionEvent.REMOVE, false, false, [item]));			dispatchEvent(new CollectionEvent(CollectionEvent.UPDATE));			return item;		}				public function toArray():Array{			return $__source.concat([]);		}				public function replace(item:Object, index:uint):void{			if(index > (length - 1)) throw new RangeError("Index out of bounds");			$__source[index] = item;						dispatchEvent(new CollectionEvent(CollectionEvent.REPLACE, false, false, [item]));			dispatchEvent(new CollectionEvent(CollectionEvent.UPDATE));		}				public function clone():ArrayCollection{			return new ArrayCollection($__source);		}			}	}